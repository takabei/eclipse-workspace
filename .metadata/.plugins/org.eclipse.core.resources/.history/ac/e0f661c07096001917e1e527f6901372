package dao.impl;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import domain.Admin;
import domain.Student;
import domain.Teacher;
import domain.User;
import utils.JdbcUtils;

public class UserDaoImpl<T extends User> {

	public int addStudent(Student stu) {
		String sql = "insert into student (stuId,classId,name,password,sex,tel,address) (?,?,?,?,?,?,?)";
		System.out.println(stu);
		Connection conn = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Class.forName("")
		try {
			conn = JdbcUtils.getConnection();
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, stu.getStuId());
			pstmt.setString(2, stu.getClazz().getClassId());
			pstmt.setString(3, stu.getUsername());
			pstmt.setString(4, stu.getPassword());
			pstmt.setString(5, stu.getSex());
			pstmt.setString(6, stu.getTel());
			pstmt.setString(7, stu.getAddress());
			return pstmt.executeUpdate();
		} catch (Exception e) {
			throw new RuntimeException(e);
		} finally {
			try {
				if (rs != null)
					rs.close();
				if (pstmt != null)
					pstmt.close();
				if (conn != null)
					conn.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
	}

	public Teacher findTeacher(Teacher user) {
		String sql = "select * from " + user.getTable() + " where teaId = ?";
		Connection conn = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Teacher tea = null;
		try {
			conn = JdbcUtils.getConnection();
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, user.getTeaId());
			rs = pstmt.executeQuery();
			while (rs.next()) {
				tea = new Teacher();
				tea.setTeaId(rs.getString("teaId"));
				tea.setUsername(rs.getString("name"));
			}
			return tea;
		} catch (Exception e) {
			throw new RuntimeException(e);
		} finally {
			try {
				if (rs != null)
					rs.close();
				if (pstmt != null)
					pstmt.close();
				if (conn != null)
					conn.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
	}

	public int updateUserPass(T user, String tnp) {
		String sql = "update " + user.getTable() + " set password = ? where name = ? and password = ?";
		Connection conn = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		try {
			conn = JdbcUtils.getConnection();
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, tnp);
			pstmt.setString(2, user.getUsername());
			pstmt.setString(3, user.getPassword());
			return pstmt.executeUpdate();
		} catch (Exception e) {
			throw new RuntimeException(e);
		} finally {
			try {
				if (rs != null)
					rs.close();
				if (pstmt != null)
					pstmt.close();
				if (conn != null)
					conn.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
	}

	/**
	 * 登陆方法
	 * 
	 * @param user
	 * @return
	 */
	public int Login(T user) {// 根据传入的表名和用户名以及密码进行校验
		String sql = "select count(*) from " + user.getTable() + " where name = ? and password = ?";
		Connection conn = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		try {
			conn = JdbcUtils.getConnection();
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, user.getUsername());
			pstmt.setString(2, user.getPassword());
			rs = pstmt.executeQuery();
			while (rs.next()) {
				int num = rs.getInt(1);
				return num;
			}
		} catch (SQLException e) {
			throw new RuntimeException(e);
		} catch (Exception e) {
			throw new RuntimeException(e);
		} finally {
			try {
				if (rs != null)
					rs.close();
				if (pstmt != null)
					pstmt.close();
				if (conn != null)
					conn.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
		return 0;
	}

	public static void main(String[] args) {
		System.out.println(new UserDaoImpl<User>().Login(new Admin("admin", "admin", "admin")));
	}

	public int findStudent(String tsid) {
		String sql = "select count(*) from student where stuId = ?";
		Connection conn = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		try {
			conn = JdbcUtils.getConnection();
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, tsid);
			rs = pstmt.executeQuery();
			while(rs.next()) {
				return rs.getInt(1);
			}
			return 0;
		}catch (Exception e) {
			throw new RuntimeException(e);
		} finally {
			try {
				if (rs != null)
					rs.close();
				if (pstmt != null)
					pstmt.close();
				if (conn != null)
					conn.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
	}

}
